datasource db { provider = "postgresql"; url = env("DATABASE_URL") }
generator client { provider = "prisma-client-js" }

model AppUser {
  id           String   @id @default(uuid())
  role         Role
  email        String?  @unique
  phone        String?  @unique
  passwordHash String?
  donor        Donor?
  hospital     Hospital?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role { DONOR HOSPITAL ADMIN }

model Donor {
  id             String   @id @default(uuid())
  user           AppUser  @relation(fields: [userId], references: [id])
  userId         String   @unique
  fullName       String
  gender         String?
  dob            DateTime?
  bloodGroup     String
  donationTypes  String[]
  lastDonationAt DateTime?
  medicalFlags   String[]
  lon            Float
  lat            Float
  city           String?
  state          String?
  active         Boolean  @default(true)
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  Match          Match[]
}

model Hospital {
  id            String   @id @default(uuid())
  user          AppUser  @relation(fields: [userId], references: [id])
  userId        String   @unique
  name          String
  regNumber     String?
  contactPerson String?
  phone         String?
  email         String?
  address       String?
  lon           Float
  lat           Float
  city          String?
  state         String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  Request       DonorRequest[]
}

model DonorRequest {
  id           String   @id @default(uuid())
  hospital     Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId   String
  requestType  String
  bloodGroup   String
  unitsNeeded  Int
  urgency      String
  requiredBy   DateTime?
  radiusKm     Float     @default(25)
  notes        String?
  status       String    @default("OPEN")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  Match        Match[]
}

model Match {
  id         String        @id @default(uuid())
  request    DonorRequest  @relation(fields: [requestId], references: [id])
  requestId  String
  donor      Donor         @relation(fields: [donorId], references: [id])
  donorId    String
  score      Float
  status     String        @default("PENDING")
  notifiedAt DateTime?
  respondedAt DateTime?
}
